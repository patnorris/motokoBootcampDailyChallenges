type TokenIndex = nat;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Result = 
 variant {
   err: text;
   ok;
 };
type Response = 
 record {
   body: record {
           latestMinter: opt principal;
           numberNFTsMinted: nat;
         };
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type List = 
 opt record {
       TokenIndex;
       List;
     };
type HeaderField = 
 record {
   text;
   text;
 };
service : {
  balance: () -> (List);
  greet: (text) -> (text);
  http_request: (Request) -> (Response) query;
  mint: () -> (Result);
  transfer: (principal, nat) -> (Result);
}
